
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BOOL_TYPE COLON COMMA DIVIDE DOT ELIF ELSE EQEQ EQUAL FLOAT FLOAT_TYPE FOR GREATER GREATER_EQUAL IDENTIFIER IF IN INT INT_TYPE LBRACE LBRACKET LESS LESS_EQUAL LET LPAREN MINUS MOD NOT NOT_EQUAL OR PLUS RBRACE RBRACKET REPEAT RPAREN SEMICOLON SET_TYPE STRING STRING_TYPE TIMES VAR WHILEstatements : statement\n| statements statementif_statement : IF LPAREN expression RPAREN LBRACE statements RBRACE elifs else_statementbin_operators : PLUS\n| MINUS\n| TIMES\n| DIVIDE\n| MOD\n| EQEQ\n| NOT_EQUAL\n| LESS\n| LESS_EQUAL\n| GREATER\n| GREATER_EQUAL\n| AND\n| ORfor_statement : FOR IDENTIFIER IN for_sequence LBRACE statements RBRACEempty :elifs : elifs ELIF LPAREN expression RPAREN LBRACE statements RBRACE\n| emptyfor_sequence : IDENTIFIER\n| collections\n| INT DOT DOT INTstatement : data_declaration\n| expression\n| if_statement\n| for_statement\n| while_statementelse_statement : ELSE LBRACE statements RBRACE\n| emptydata_declaration : LET IDENTIFIER COLON typehint EQUAL expression\n| VAR IDENTIFIER COLON typehint EQUAL expression\n| IDENTIFIER EQUAL expression\nwhile_block : WHILE LPAREN expression RPARENbasic_typehints : INT_TYPE\n| FLOAT_TYPE\n| BOOL_TYPE\n| STRING_TYPE\n| SET_TYPEwhile_statement : while_block LBRACE statements RBRACE\n| REPEAT LBRACE statements RBRACE while_blocktypehint : LBRACKET basic_typehints RBRACKET\n| LBRACKET basic_typehints COLON basic_typehints RBRACKET\n| basic_typehintsexpression : IDENTIFIER\n| basic_types\n| comparison_expressioncomparison_expression : expression bin_operators expressionbasic_types : INT\n| FLOAT\n| BOOL\n| STRING\n| collectionscollections : LBRACKET collection_contents RBRACKET\n| LPAREN collection_contents RPARENcollection_contents : collection_content\n| collection_content COMMA collection_contentscollection_content : basic_types\n| basic_types COLON basic_types'
    
_lr_action_items = {'LET':([0,1,2,3,4,5,6,7,9,11,12,18,19,20,21,22,25,48,49,52,53,55,58,62,63,65,82,84,88,89,91,92,95,96,97,100,101,104,105,106,109,111,113,115,116,117,118,],[8,8,-1,-24,-25,-26,-27,-28,-45,-46,-47,-49,-50,-51,-52,-53,-2,8,8,-48,-45,-33,-55,8,8,-54,-40,-34,8,8,-41,-31,-32,8,8,-18,-17,-18,-20,-3,-30,8,8,-29,8,8,-19,]),'VAR':([0,1,2,3,4,5,6,7,9,11,12,18,19,20,21,22,25,48,49,52,53,55,58,62,63,65,82,84,88,89,91,92,95,96,97,100,101,104,105,106,109,111,113,115,116,117,118,],[10,10,-1,-24,-25,-26,-27,-28,-45,-46,-47,-49,-50,-51,-52,-53,-2,10,10,-48,-45,-33,-55,10,10,-54,-40,-34,10,10,-41,-31,-32,10,10,-18,-17,-18,-20,-3,-30,10,10,-29,10,10,-19,]),'IDENTIFIER':([0,1,2,3,4,5,6,7,8,9,10,11,12,15,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,48,49,50,52,53,55,58,61,62,63,65,82,84,85,87,88,89,91,92,95,96,97,100,101,104,105,106,109,110,111,113,115,116,117,118,],[9,9,-1,-24,-25,-26,-27,-28,40,-45,42,-46,-47,47,-49,-50,-51,-52,-53,-2,53,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,53,53,9,9,53,-48,-45,-33,-55,78,9,9,-54,-40,-34,53,53,9,9,-41,-31,-32,9,9,-18,-17,-18,-20,-3,-30,53,9,9,-29,9,9,-19,]),'IF':([0,1,2,3,4,5,6,7,9,11,12,18,19,20,21,22,25,48,49,52,53,55,58,62,63,65,82,84,88,89,91,92,95,96,97,100,101,104,105,106,109,111,113,115,116,117,118,],[13,13,-1,-24,-25,-26,-27,-28,-45,-46,-47,-49,-50,-51,-52,-53,-2,13,13,-48,-45,-33,-55,13,13,-54,-40,-34,13,13,-41,-31,-32,13,13,-18,-17,-18,-20,-3,-30,13,13,-29,13,13,-19,]),'FOR':([0,1,2,3,4,5,6,7,9,11,12,18,19,20,21,22,25,48,49,52,53,55,58,62,63,65,82,84,88,89,91,92,95,96,97,100,101,104,105,106,109,111,113,115,116,117,118,],[15,15,-1,-24,-25,-26,-27,-28,-45,-46,-47,-49,-50,-51,-52,-53,-2,15,15,-48,-45,-33,-55,15,15,-54,-40,-34,15,15,-41,-31,-32,15,15,-18,-17,-18,-20,-3,-30,15,15,-29,15,15,-19,]),'REPEAT':([0,1,2,3,4,5,6,7,9,11,12,18,19,20,21,22,25,48,49,52,53,55,58,62,63,65,82,84,88,89,91,92,95,96,97,100,101,104,105,106,109,111,113,115,116,117,118,],[17,17,-1,-24,-25,-26,-27,-28,-45,-46,-47,-49,-50,-51,-52,-53,-2,17,17,-48,-45,-33,-55,17,17,-54,-40,-34,17,17,-41,-31,-32,17,17,-18,-17,-18,-20,-3,-30,17,17,-29,17,17,-19,]),'INT':([0,1,2,3,4,5,6,7,9,11,12,14,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,48,49,50,52,53,55,58,59,60,61,62,63,65,82,84,85,87,88,89,91,92,95,96,97,98,100,101,104,105,106,109,110,111,113,115,116,117,118,],[18,18,-1,-24,-25,-26,-27,-28,-45,-46,-47,18,-49,-50,-51,-52,-53,18,-2,18,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,18,18,18,18,18,-48,-45,-33,-55,18,18,81,18,18,-54,-40,-34,18,18,18,18,-41,-31,-32,18,18,102,-18,-17,-18,-20,-3,-30,18,18,18,-29,18,18,-19,]),'FLOAT':([0,1,2,3,4,5,6,7,9,11,12,14,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,48,49,50,52,53,55,58,59,60,62,63,65,82,84,85,87,88,89,91,92,95,96,97,100,101,104,105,106,109,110,111,113,115,116,117,118,],[19,19,-1,-24,-25,-26,-27,-28,-45,-46,-47,19,-49,-50,-51,-52,-53,19,-2,19,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,19,19,19,19,19,-48,-45,-33,-55,19,19,19,19,-54,-40,-34,19,19,19,19,-41,-31,-32,19,19,-18,-17,-18,-20,-3,-30,19,19,19,-29,19,19,-19,]),'BOOL':([0,1,2,3,4,5,6,7,9,11,12,14,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,48,49,50,52,53,55,58,59,60,62,63,65,82,84,85,87,88,89,91,92,95,96,97,100,101,104,105,106,109,110,111,113,115,116,117,118,],[20,20,-1,-24,-25,-26,-27,-28,-45,-46,-47,20,-49,-50,-51,-52,-53,20,-2,20,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,20,20,20,20,20,-48,-45,-33,-55,20,20,20,20,-54,-40,-34,20,20,20,20,-41,-31,-32,20,20,-18,-17,-18,-20,-3,-30,20,20,20,-29,20,20,-19,]),'STRING':([0,1,2,3,4,5,6,7,9,11,12,14,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,48,49,50,52,53,55,58,59,60,62,63,65,82,84,85,87,88,89,91,92,95,96,97,100,101,104,105,106,109,110,111,113,115,116,117,118,],[21,21,-1,-24,-25,-26,-27,-28,-45,-46,-47,21,-49,-50,-51,-52,-53,21,-2,21,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,21,21,21,21,21,-48,-45,-33,-55,21,21,21,21,-54,-40,-34,21,21,21,21,-41,-31,-32,21,21,-18,-17,-18,-20,-3,-30,21,21,21,-29,21,21,-19,]),'WHILE':([0,1,2,3,4,5,6,7,9,11,12,18,19,20,21,22,25,48,49,52,53,55,58,62,63,65,82,83,84,88,89,91,92,95,96,97,100,101,104,105,106,109,111,113,115,116,117,118,],[23,23,-1,-24,-25,-26,-27,-28,-45,-46,-47,-49,-50,-51,-52,-53,-2,23,23,-48,-45,-33,-55,23,23,-54,-40,23,-34,23,23,-41,-31,-32,23,23,-18,-17,-18,-20,-3,-30,23,23,-29,23,23,-19,]),'LBRACKET':([0,1,2,3,4,5,6,7,9,11,12,14,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,48,49,50,52,53,54,55,56,58,59,60,61,62,63,65,82,84,85,87,88,89,91,92,95,96,97,100,101,104,105,106,109,110,111,113,115,116,117,118,],[24,24,-1,-24,-25,-26,-27,-28,-45,-46,-47,24,-49,-50,-51,-52,-53,24,-2,24,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,24,24,24,24,24,-48,-45,67,-33,67,-55,24,24,24,24,24,-54,-40,-34,24,24,24,24,-41,-31,-32,24,24,-18,-17,-18,-20,-3,-30,24,24,24,-29,24,24,-19,]),'LPAREN':([0,1,2,3,4,5,6,7,9,11,12,13,14,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,48,49,50,52,53,55,58,59,60,61,62,63,65,82,84,85,87,88,89,91,92,95,96,97,100,101,104,105,106,107,109,110,111,113,115,116,117,118,],[14,14,-1,-24,-25,-26,-27,-28,-45,-46,-47,43,14,-49,-50,-51,-52,-53,50,14,-2,14,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,14,14,14,14,14,-48,-45,-33,-55,14,14,14,14,14,-54,-40,-34,14,14,14,14,-41,-31,-32,14,14,-18,-17,-18,-20,-3,110,-30,14,14,14,-29,14,14,-19,]),'$end':([1,2,3,4,5,6,7,9,11,12,18,19,20,21,22,25,52,53,55,58,65,82,84,91,92,95,100,101,104,105,106,109,115,118,],[0,-1,-24,-25,-26,-27,-28,-45,-46,-47,-49,-50,-51,-52,-53,-2,-48,-45,-33,-55,-54,-40,-34,-41,-31,-32,-18,-17,-18,-20,-3,-30,-29,-19,]),'RBRACE':([2,3,4,5,6,7,9,11,12,18,19,20,21,22,25,52,53,55,58,62,63,65,82,84,91,92,95,96,97,100,101,104,105,106,109,113,115,117,118,],[-1,-24,-25,-26,-27,-28,-45,-46,-47,-49,-50,-51,-52,-53,-2,-48,-45,-33,-55,82,83,-54,-40,-34,-41,-31,-32,100,101,-18,-17,-18,-20,-3,-30,115,-29,118,-19,]),'PLUS':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[27,-45,-46,-47,-49,-50,-51,-52,-53,27,-45,27,27,-55,27,-54,27,27,27,]),'MINUS':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[28,-45,-46,-47,-49,-50,-51,-52,-53,28,-45,28,28,-55,28,-54,28,28,28,]),'TIMES':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[29,-45,-46,-47,-49,-50,-51,-52,-53,29,-45,29,29,-55,29,-54,29,29,29,]),'DIVIDE':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[30,-45,-46,-47,-49,-50,-51,-52,-53,30,-45,30,30,-55,30,-54,30,30,30,]),'MOD':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[31,-45,-46,-47,-49,-50,-51,-52,-53,31,-45,31,31,-55,31,-54,31,31,31,]),'EQEQ':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[32,-45,-46,-47,-49,-50,-51,-52,-53,32,-45,32,32,-55,32,-54,32,32,32,]),'NOT_EQUAL':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[33,-45,-46,-47,-49,-50,-51,-52,-53,33,-45,33,33,-55,33,-54,33,33,33,]),'LESS':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[34,-45,-46,-47,-49,-50,-51,-52,-53,34,-45,34,34,-55,34,-54,34,34,34,]),'LESS_EQUAL':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[35,-45,-46,-47,-49,-50,-51,-52,-53,35,-45,35,35,-55,35,-54,35,35,35,]),'GREATER':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[36,-45,-46,-47,-49,-50,-51,-52,-53,36,-45,36,36,-55,36,-54,36,36,36,]),'GREATER_EQUAL':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[37,-45,-46,-47,-49,-50,-51,-52,-53,37,-45,37,37,-55,37,-54,37,37,37,]),'AND':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[38,-45,-46,-47,-49,-50,-51,-52,-53,38,-45,38,38,-55,38,-54,38,38,38,]),'OR':([4,9,11,12,18,19,20,21,22,52,53,55,57,58,64,65,92,95,112,],[39,-45,-46,-47,-49,-50,-51,-52,-53,39,-45,39,39,-55,39,-54,39,39,39,]),'EQUAL':([9,66,68,69,70,71,72,73,74,93,103,],[41,85,-44,-35,-36,-37,-38,-39,87,-42,-43,]),'RPAREN':([11,12,18,19,20,21,22,44,45,46,52,53,57,58,64,65,76,77,112,],[-46,-47,-49,-50,-51,-52,-53,58,-56,-58,-48,-45,75,-55,84,-54,-57,-59,114,]),'LBRACE':([16,17,58,65,75,78,79,80,84,102,108,114,],[48,49,-55,-54,88,-21,89,-22,-34,-23,111,116,]),'COLON':([18,19,20,21,22,40,42,46,58,65,69,70,71,72,73,86,],[-49,-50,-51,-52,-53,54,56,60,-55,-54,-35,-36,-37,-38,-39,94,]),'COMMA':([18,19,20,21,22,45,46,58,65,77,],[-49,-50,-51,-52,-53,59,-58,-55,-54,-59,]),'RBRACKET':([18,19,20,21,22,45,46,51,58,65,69,70,71,72,73,76,77,86,99,],[-49,-50,-51,-52,-53,-56,-58,65,-55,-54,-35,-36,-37,-38,-39,-57,-59,93,103,]),'IN':([47,],[61,]),'INT_TYPE':([54,56,67,94,],[69,69,69,69,]),'FLOAT_TYPE':([54,56,67,94,],[70,70,70,70,]),'BOOL_TYPE':([54,56,67,94,],[71,71,71,71,]),'STRING_TYPE':([54,56,67,94,],[72,72,72,72,]),'SET_TYPE':([54,56,67,94,],[73,73,73,73,]),'DOT':([81,90,],[90,98,]),'ELIF':([100,104,105,118,],[-18,107,-20,-19,]),'ELSE':([100,104,105,118,],[-18,108,-20,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,48,49,88,89,111,116,],[1,62,63,96,97,113,117,]),'statement':([0,1,48,49,62,63,88,89,96,97,111,113,116,117,],[2,25,2,2,25,25,2,2,25,25,2,25,2,25,]),'data_declaration':([0,1,48,49,62,63,88,89,96,97,111,113,116,117,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'expression':([0,1,26,41,43,48,49,50,62,63,85,87,88,89,96,97,110,111,113,116,117,],[4,4,52,55,57,4,4,64,4,4,92,95,4,4,4,4,112,4,4,4,4,]),'if_statement':([0,1,48,49,62,63,88,89,96,97,111,113,116,117,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for_statement':([0,1,48,49,62,63,88,89,96,97,111,113,116,117,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'while_statement':([0,1,48,49,62,63,88,89,96,97,111,113,116,117,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'basic_types':([0,1,14,24,26,41,43,48,49,50,59,60,62,63,85,87,88,89,96,97,110,111,113,116,117,],[11,11,46,46,11,11,11,11,11,11,46,77,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'comparison_expression':([0,1,26,41,43,48,49,50,62,63,85,87,88,89,96,97,110,111,113,116,117,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'while_block':([0,1,48,49,62,63,83,88,89,96,97,111,113,116,117,],[16,16,16,16,16,16,91,16,16,16,16,16,16,16,16,]),'collections':([0,1,14,24,26,41,43,48,49,50,59,60,61,62,63,85,87,88,89,96,97,110,111,113,116,117,],[22,22,22,22,22,22,22,22,22,22,22,22,80,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'bin_operators':([4,52,55,57,64,92,95,112,],[26,26,26,26,26,26,26,26,]),'collection_contents':([14,24,59,],[44,51,76,]),'collection_content':([14,24,59,],[45,45,45,]),'typehint':([54,56,],[66,74,]),'basic_typehints':([54,56,67,94,],[68,68,86,99,]),'for_sequence':([61,],[79,]),'elifs':([100,],[104,]),'empty':([100,104,],[105,109,]),'else_statement':([104,],[106,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statement','statements',1,'p_statements','root.py',2),
  ('statements -> statements statement','statements',2,'p_statements','root.py',3),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE elifs else_statement','if_statement',9,'p_if_statement','selection.py',2),
  ('bin_operators -> PLUS','bin_operators',1,'p_bin_operators','types.py',2),
  ('bin_operators -> MINUS','bin_operators',1,'p_bin_operators','types.py',3),
  ('bin_operators -> TIMES','bin_operators',1,'p_bin_operators','types.py',4),
  ('bin_operators -> DIVIDE','bin_operators',1,'p_bin_operators','types.py',5),
  ('bin_operators -> MOD','bin_operators',1,'p_bin_operators','types.py',6),
  ('bin_operators -> EQEQ','bin_operators',1,'p_bin_operators','types.py',7),
  ('bin_operators -> NOT_EQUAL','bin_operators',1,'p_bin_operators','types.py',8),
  ('bin_operators -> LESS','bin_operators',1,'p_bin_operators','types.py',9),
  ('bin_operators -> LESS_EQUAL','bin_operators',1,'p_bin_operators','types.py',10),
  ('bin_operators -> GREATER','bin_operators',1,'p_bin_operators','types.py',11),
  ('bin_operators -> GREATER_EQUAL','bin_operators',1,'p_bin_operators','types.py',12),
  ('bin_operators -> AND','bin_operators',1,'p_bin_operators','types.py',13),
  ('bin_operators -> OR','bin_operators',1,'p_bin_operators','types.py',14),
  ('for_statement -> FOR IDENTIFIER IN for_sequence LBRACE statements RBRACE','for_statement',7,'p_for_statement','loop.py',5),
  ('empty -> <empty>','empty',0,'p_empty','util.py',5),
  ('elifs -> elifs ELIF LPAREN expression RPAREN LBRACE statements RBRACE','elifs',8,'p_elifs','selection.py',7),
  ('elifs -> empty','elifs',1,'p_elifs','selection.py',8),
  ('for_sequence -> IDENTIFIER','for_sequence',1,'p_for_sequence','loop.py',10),
  ('for_sequence -> collections','for_sequence',1,'p_for_sequence','loop.py',11),
  ('for_sequence -> INT DOT DOT INT','for_sequence',4,'p_for_sequence','loop.py',12),
  ('statement -> data_declaration','statement',1,'p_statement','root.py',11),
  ('statement -> expression','statement',1,'p_statement','root.py',12),
  ('statement -> if_statement','statement',1,'p_statement','root.py',13),
  ('statement -> for_statement','statement',1,'p_statement','root.py',14),
  ('statement -> while_statement','statement',1,'p_statement','root.py',15),
  ('else_statement -> ELSE LBRACE statements RBRACE','else_statement',4,'p_else_statement','selection.py',16),
  ('else_statement -> empty','else_statement',1,'p_else_statement','selection.py',17),
  ('data_declaration -> LET IDENTIFIER COLON typehint EQUAL expression','data_declaration',6,'p_data_declaration','root.py',20),
  ('data_declaration -> VAR IDENTIFIER COLON typehint EQUAL expression','data_declaration',6,'p_data_declaration','root.py',21),
  ('data_declaration -> IDENTIFIER EQUAL expression','data_declaration',3,'p_data_declaration','root.py',22),
  ('while_block -> WHILE LPAREN expression RPAREN','while_block',4,'p_while_block','loop.py',20),
  ('basic_typehints -> INT_TYPE','basic_typehints',1,'p_basic_typehints','types.py',22),
  ('basic_typehints -> FLOAT_TYPE','basic_typehints',1,'p_basic_typehints','types.py',23),
  ('basic_typehints -> BOOL_TYPE','basic_typehints',1,'p_basic_typehints','types.py',24),
  ('basic_typehints -> STRING_TYPE','basic_typehints',1,'p_basic_typehints','types.py',25),
  ('basic_typehints -> SET_TYPE','basic_typehints',1,'p_basic_typehints','types.py',26),
  ('while_statement -> while_block LBRACE statements RBRACE','while_statement',4,'p_while_statement','loop.py',25),
  ('while_statement -> REPEAT LBRACE statements RBRACE while_block','while_statement',5,'p_while_statement','loop.py',26),
  ('typehint -> LBRACKET basic_typehints RBRACKET','typehint',3,'p_typehint','types.py',31),
  ('typehint -> LBRACKET basic_typehints COLON basic_typehints RBRACKET','typehint',5,'p_typehint','types.py',32),
  ('typehint -> basic_typehints','typehint',1,'p_typehint','types.py',33),
  ('expression -> IDENTIFIER','expression',1,'p_expression','root.py',33),
  ('expression -> basic_types','expression',1,'p_expression','root.py',34),
  ('expression -> comparison_expression','expression',1,'p_expression','root.py',35),
  ('comparison_expression -> expression bin_operators expression','comparison_expression',3,'p_comparison_expression','root.py',43),
  ('basic_types -> INT','basic_types',1,'p_basic_types','types.py',46),
  ('basic_types -> FLOAT','basic_types',1,'p_basic_types','types.py',47),
  ('basic_types -> BOOL','basic_types',1,'p_basic_types','types.py',48),
  ('basic_types -> STRING','basic_types',1,'p_basic_types','types.py',49),
  ('basic_types -> collections','basic_types',1,'p_basic_types','types.py',50),
  ('collections -> LBRACKET collection_contents RBRACKET','collections',3,'p_collections','types.py',62),
  ('collections -> LPAREN collection_contents RPAREN','collections',3,'p_collections','types.py',63),
  ('collection_contents -> collection_content','collection_contents',1,'p_collection_contents','types.py',68),
  ('collection_contents -> collection_content COMMA collection_contents','collection_contents',3,'p_collection_contents','types.py',69),
  ('collection_content -> basic_types','collection_content',1,'p_collection_content','types.py',77),
  ('collection_content -> basic_types COLON basic_types','collection_content',3,'p_collection_content','types.py',78),
]
